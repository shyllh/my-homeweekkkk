一、var、const和let区别？
var声明的变量为全局作用域、而let声明的变量为块级作用域、const声明的常量为块级作用域。var声明的变量存在变量提升，而const和let不存在变量的提升。var可以重复声明同一个变量、let和const不能声明同一个变量，const声明的值不能修改，但是如果const声明的是一个对象，对象里面的属性和值可以修改.

二、说一说常见的数据类型？
基本数据类型：String、Number、Boolean、Undefined、Null、Symbol、BigInt

引用数据类型：object（array、function、date、math、Reg）
三、如何判断JS数据类型？
typeOf：返回判断数据的类型。对于简单数据类型，除了null返回object,其他都可以正确判断。对于引用数据类型，除了function外都会返回object。

instanceof：判断对象的原型链__proto__上是否存在构造函数的原型prototype，只能判断引用数据类型，不能判断基本数据类型，常用来判断a是否为b的实例。

object.prototype.toString.call()：返回类型为[object 数据类型]

四、解释一下什么是闭包 ?
闭包：就是能够读取外层函数内部变量的函数。
闭包需要满足三个条件：
访问所在作用域；
函数嵌套；
在所在作用域外被调用 。
优点： 可以重复使用变量，并且不会造成变量污染 。
缺点： 会引起内存泄漏
使用闭包的注意点：
由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。
闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象
（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值

五、解释一下原型和原型链 ?
原型就是一个为对象实例定义了一些公共属性和公共方法的对象模板。
对象之间的继承关系通过构造函数的prototype指向父类对象，直到指向Object对象为止形成的指向链条。

通俗讲： 原型链是原型对象创建过程的历史记录。 

注：在javascript中，所有的对象都拥有一个__proto__属性指向该对象的原型（prototype) 。
六、数组排序的方式 ?
    for(var i=0;i<arr.length-1;i++){
            for(var j=0;j<arr.length-i-1;j++){
                if(arr[j]>arr[j+1]){
                    var temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        if(arr[j]===arr[j-1]) i++;
        }
七、for 循环与 forEach 的区别 ?
1.for循环可以使用break跳出循环，但forEach不能。
2.for循环可以控制循环起点（i初始化的数字决定循环的起点），forEach只能默认从索引0开始。
3.for循环过程中支持修改索引（修改 i），但forEach做不到（底层控制index自增，无法左右它）。

八.=== 和==的区别
===  三个等号称为同等符。
当等号两边的值类型相同的时候，直接比较等号两边的值。值相同则返回true。
若等号两边的值类型不同时直接返回false。
就是说三个等号，既要判断值也要判断类型是否相等。
==：两个等号称为等值符
当等号两边的值为相同类型时，比较值是否相同，
类型不同时 会发生类型的自动转换，转换为相同类型后再作比较。
总的来说就是两个等号 只要值相等 就可以

九.怎样理解作用域何作用域链
作用域：

变量与函数的可访问范围。 由当前环境与上层环境的一系列变量对象组成。

作用：作用域最大的用处就是隔离变量，不同作用域下同名变量不会有冲突。

作用域链：

变量到 创建该变量的函数的作用域中取值。但是如果在当前作用域中没取到。就会向上级作用域中去查，直到全局作用域。

这样一个查找过程形成的链条就叫做作用域链。

十.js中this的五种情况
普通函数调用，this指向window

函数作为对象的方法被调用时，this指向该对象。

构造器调用,this指向返回的这个对象

箭头函数的this绑定this所在函数定义在哪个对象下就绑定到最近一层对象上

十一.什么是原型、原型链
原型

构造函数`的prototype和其`实例`的__proto__是指向同一个地方的，这个地方就叫做`原型对象

//对象都会有一个属性 __proto__ 指向构造函数的 prototype 原型对象
 console.log(Obj.__proto__ === Obj.constructor.prototype); //true

首先要知道一个原型关系：

每一个class都有一个显示原型prototype

每个实例都有一个隐式原型_ _proto

实例的_proto _指向对应class的prototype

原型链

比如当我们访问某个对象上的login()方法，如果没有它就会去当前的原型对象上(prototype)上去查找，如果没有继续向上一层的原型对象上 去找，直到Object的原型对象，没有找到就报错，这样一个向上的过程就是原型链


